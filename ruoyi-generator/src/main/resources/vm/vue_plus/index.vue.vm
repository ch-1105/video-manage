<template>
  <p>
    <a-space>
      <a-button type="primary" @click="handleQuery()">刷新</a-button>
      <a-button type="primary" @click="onAdd" v-hasPermi="['${permissionPrefix}:add']">新增</a-button>
    </a-space>
  </p>
  <a-table :dataSource="${className}s"
           :columns="columns"
           :pagination="pagination"
           @change="handleTableChange"
           :loading="loading">
    <template #bodyCell="{ column, record }">
      <template v-if="column.dataIndex === 'operation'">
        <a-space>
          <a-popconfirm
              title="删除后不可恢复，确认删除?"
              @confirm="onDelete(record)"
              ok-text="确认" cancel-text="取消">
            <a style="color: red" v-hasPermi="['${permissionPrefix}:remove']">删除</a>
          </a-popconfirm>
          <a @click="onEdit(record)" v-hasPermi="['${permissionPrefix}:edit']">编辑</a>
        </a-space>
      </template>
#foreach($column in $columns)
#if($column.dictType)
      <template v-else-if="column.dataIndex === '${column.javaField}'">
        <dict-tag :options="${column.dictType}" :value="record.${column.javaField}"/>
      </template>
#end
#end
    </template>
  </a-table>

  <a-modal v-model:open="open" title="${functionName}" @ok="handleOk"
           ok-text="确认" cancel-text="取消">
    <a-form :model="${className}" :label-col="{span: 4}" :wrapper-col="{ span: 20 }">
#foreach($column in $columns)
#if($column.insert && !$column.pk && !$table.isSuperColumn($column.javaField))
      <a-form-item label="${column.columnComment}">
#if($column.dictType)
        <a-select v-model:value="${className}.${column.javaField}">
          <a-select-option v-for="dict in ${column.dictType}" :key="dict.value" :value="dict.value">
            {{dict.label}}
          </a-select-option>
        </a-select>
#elseif($column.htmlType == "datetime")
        <a-date-picker v-model:value="${className}.${column.javaField}" valueFormat="YYYY-MM-DD HH:mm:ss" show-time placeholder="请选择${column.columnComment}" />
#else
        <a-input v-model:value="${className}.${column.javaField}" />
#end
      </a-form-item>
#end
#end
    </a-form>
  </a-modal>
</template>

<script setup name="${BusinessName}">
import { defineComponent, ref, onMounted, getCurrentInstance } from 'vue';
import { notification } from "ant-design-vue";
import { save${ClassName}, queryList${ClassName}, delete${ClassName} } from "@/api/${moduleName}/admin/${businessName}";
import { hasPermi } from '@/utils/auth';
import DictTag from '@/components/DictTag';

const { proxy } = getCurrentInstance();

#foreach($column in $columns)
#if($column.dictType)
const ${column.dictType} = proxy.useDict("${column.dictType}").value;
#end
#end

const open = ref(false);
let ${className} = ref({
#foreach($column in $columns)
#if(!$table.isSuperColumn($column.javaField))
  ${column.javaField}: undefined,
#end
#end
});
const ${className}s = ref([]);
const pagination = ref({
  total: 0,
  current: 1,
  pageSize: 10,
});
let loading = ref(false);
const columns = [
#foreach($column in $columns)
#if($column.list && !$table.isSuperColumn($column.javaField))
  {
    title: '${column.columnComment}',
    dataIndex: '${column.javaField}',
    key: '${column.javaField}',
  },
#end
#end
  {
    title: '操作',
    dataIndex: 'operation'
  }
];

const onAdd = () => {
  ${className}.value = {};
  open.value = true;
};

const onEdit = (record) => {
  ${className}.value = JSON.parse(JSON.stringify(record)); // Deep copy
  open.value = true;
};

const onDelete = (record) => {
  delete${ClassName}(record.${pkColumn.javaField}).then((response) => {
    if (response.code === 200) {
      notification.success({description: "删除成功！"});
      handleQuery({
        page: pagination.value.current,
        size: pagination.value.pageSize,
      });
    } else {
      notification.error({description: response.msg});
    }
  });
};

const handleOk = () => {
  save${ClassName}(${className}.value).then((response) => {
    if (response.code === 200) {
      notification.success({description: "保存成功！"});
      open.value = false;
      handleQuery({
        page: pagination.value.current,
        size: pagination.value.pageSize
      });
    } else {
      notification.error({description: response.msg});
    }
  });
};

const handleQuery = (param) => {
  if (!param) {
    param = {
      page: 1,
      size: pagination.value.pageSize
    };
  }
  loading.value = true;
  queryList${ClassName}({
    pageNum: param.page,
    pageSize: param.size
  }).then((response) => {
    loading.value = false;
    if (response.code === 200) {
      ${className}s.value = response.rows;
      pagination.value.current = param.page;
      pagination.value.total = response.total;
    } else {
      notification.error({description: response.msg});
    }
  });
};

const handleTableChange = (page) => {
  pagination.value.pageSize = page.pageSize;
  handleQuery({
    page: page.current,
    size: page.pageSize
  });
};

onMounted(() => {
  handleQuery({
    page: 1,
    size: pagination.value.pageSize
  });
});

</script>
